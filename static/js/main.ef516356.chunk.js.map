{"version":3,"sources":["sampleText.js","App.js","serviceWorker.js","index.js"],"names":["sampleText","App","state","text","handleChange","event","target","value","setState","renderText","__html","marked","sanitize","localStorage","getItem","this","setItem","className","onChange","rows","dangerouslySetInnerHTML","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qRAAaA,EAAa,gf,OC2DXC,E,4MAlDbC,MAAQ,CACNC,KAAMH,G,EAkBRI,aAAe,SAAAC,GACb,IAAMF,EAAOE,EAAMC,OAAOC,MAC1B,EAAKC,SAAS,CAAEL,U,EAGlBM,WAAa,SAAAN,GAEX,MAAO,CAAEO,OADMC,IAAOR,EAAM,CAAES,UAAU,M,uDArB1C,WACE,IAAMT,EAAOU,aAAaC,QAAQ,QAE9BX,EACFY,KAAKP,SAAS,CAAEL,SAEhBY,KAAKP,SAAS,CAAEL,KAAMH,M,gCAI1B,WAAuB,IACbG,EAASY,KAAKb,MAAdC,KACRU,aAAaG,QAAQ,OAAQb,K,oBAa/B,WAEE,OACE,qBAAKc,UAAU,YAAf,SACE,sBAAKA,UAAU,MAAf,UACE,qBAAKA,UAAU,WAAf,SACE,0BACEC,SAAUH,KAAKX,aACfG,MAAOQ,KAAKb,MAAMC,KAClBc,UAAU,yBACVE,KAAK,SAET,qBAAKF,UAAU,qBAAf,SACE,qBAAKA,UAAU,YAAYG,wBAAyBL,KAAKN,WAAWM,KAAKb,MAAMC,mB,GA3CzEkB,aCREC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCCNC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SD0G3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ef516356.chunk.js","sourcesContent":["export const sampleText = '# Title\\n## Sub-Title \\n### Deeper title\\n \\n Paragraphs are separated\\n by an empty line.\\n\\nLeave two spaces at the end of a line\\n to go to the line.\\n\\nAttributs: *italic*, **bold**, \\n`monospace`, ~~striped~~.\\n\\nList:\\n\\n  * apples\\n  * oranges\\n  * pears\\n\\n Numbered list:\\n\\n  1. tofu\\n  2. mushrooms\\n  3. bread\\n\\n Link with placeholder text: *[Google](https://www.google.com)* \\n\\n  Simple link: https://www.Google.com/ \\n\\n Code: ```\\n console.log(\"Hey, how\\'s it going?\"); \\n``` '\n","import React, { Component } from 'react'\nimport './App.css'\nimport './DarkMode.css'\n\nimport marked from 'marked'\n\nimport { sampleText } from './sampleText.js'\n\nclass App extends Component {\n  state = {\n    text: sampleText,\n  }\n\n  componentDidMount () {\n    const text = localStorage.getItem('text')\n\n    if (text) {\n      this.setState({ text })\n    } else {\n      this.setState({ text: sampleText })\n    }\n  }\n\n  componentDidUpdate () {\n    const { text } = this.state\n    localStorage.setItem('text', text)\n  }\n\n  handleChange = event => {\n    const text = event.target.value\n    this.setState({ text })\n  }\n\n  renderText = text => {\n    const __html = marked(text, { sanitize: true })\n    return { __html }\n  }\n\n  render () {\n  \n    return (\n      <div className='container'>\n        <div className='row'>\n          <div className='col-sm-6'>\n            <textarea\n              onChange={this.handleChange}\n              value={this.state.text}\n              className='form-control dark-mode'\n              rows='35' />\n          </div>\n          <div className='col-sm-6 dark-mode'>\n            <div className='dark-mode' dangerouslySetInnerHTML={this.renderText(this.state.text)} />\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App","const isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}","import 'bootstrap/dist/css/bootstrap.min.css'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker.js'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()"],"sourceRoot":""}